import pandas as pd
import os
import sys
import numpy as np

p = os.getcwd()
sys.path.append(p)

from sm_utils import *
from utils import *
from plotting import *
from ss_sj_utils import *

############# config stuff
configfile: 'config.yml'

datasets_per_talon_run = config['params']['talon']['datasets_per_run']
species=['human', 'mouse']
end_modes = ['tss', 'tes']

# lr stuff
lr_df = process_lr_metadata(config['lr']['meta'],
                            species,
                            datasets_per_talon_run)

# external snakefiles
include: 'download.smk'
include: 'samtools.smk'
include: 'spike_refs.smk'
include: 'refs.smk'
include: 'talon.smk'
include: 'lapa.smk'
include: 'cerberus.smk'
include: 'gtex.smk'
include: 'encode_tss.smk'
include: 'ccre.smk'
include: 'fantom_cage.smk'
include: 'polyasite_atlas.smk'
include: 'pas.smk'
include: 'lrgasp_cage.smk'
include: 'procap.smk'
include: 'swan.smk'
include: 'pol2_chip.smk'
include: 'analysis.smk'
include: 'mane.smk'
include: 'read_lens.smk'
include: 'tracks.smk'
include: 'bigwig.smk'
include: 'suppa.smk'
include: 'intropolis.smk'
include: 'isoquant.smk'

############# snakemake settings stuff
wildcard_constraints:
    dataset='|'.join([re.escape(x) for x in lr_df.dataset.tolist()]),
    sample='|'.join([re.escape(x) for x in lr_df['sample'].unique().tolist()]),
    species='|'.join([re.escape(x) for x in lr_df.species.unique().tolist()]),
    talon_run='|'.join([re.escape(x) for x in lr_df.talon_run.astype(str).unique().tolist()])

############ rules
rule all:
    input:
        rules.all_isoquant.input,
        rules.all_intropolis.input,
        rules.all_suppa.input,
        rules.all_cerberus.input,
        rules.all_swan.input,
        rules.all_bigwig.input,
        rules.all_read_lens.input,
        rules.all_analysis.input,
        rules.all_tracks.input,
        expand(rules.all_mane.input,
               species='human',
               obs_col=['sample', 'dataset']),
        expand(config['ref']['cerberus']['new_gtf_t_info'],
               species=species),
        expand(config['lr']['cerberus']['gtf_t_info'],
              species=species),
        expand(config['lr']['read_len_meta'],
                species='human'),
        expand(config['lr']['cerberus']['ab'],
               species='mouse'),
        expand(config['ref']['new_gtf_t_info'],
               species=species),
        expand(config['ref']['new_gtf_g_info'],
              species=species),
        expand(config['lr']['talon']['gtf_fusion_fix'],
              species=species)





        # expand(rules.all_swan.input,
        #        species=species)

        # rules.all_cerberus.input,
        # expand(config['lr']['talon']['gene_ab'],
        #        species=species)

   # expand(config['lr']['talon']['bam_ind'],
   #        zip,
   #        species=lr_df.species.tolist(),
   #        dataset=lr_df.dataset.tolist()),
        # rules.all_pas.input,
        # rules.all_procap.input,
        # rules.all_lrgasp_cage.input,
        # rules.all_polyasite.input,
        # rules.all_fantom.input,
        # rules.all_pas.input,
        # rules.all_tss.input,
        # rules.all_ccre.input,


        # expand(config['lr']['lapa']['filt']['gtf'],
        #        zip,
        #        species=lr_df.species.tolist()),



        # expand(config['lr']['talon']['db'],
        #        zip,
        #        species=lr_df.species.tolist(),
        #        talon_run=lr_df.max_talon_run.tolist())
        # expand(config['lr']['talon']['config'],
        #        zip,
        #        species=lr_df.species.tolist(),
        #        talon_run=lr_df.talon_run.tolist())
        # expand(config['lr']['bam_ind'],
        #        species=species,
        #        dataset=['hl60_1_1',
        #                 'brodmann_area_46_1_1'])



################################################################################
############################### LR Download ####################################
################################################################################
use rule dl_encid as dl_lr with:
    params:
        encid = lambda wc:get_lr_encid(wc, lr_df),
        file_ext = 'bam'
    output:
        out = temporary(config['lr']['bam'])
