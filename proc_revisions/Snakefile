import pandas as pd
import os
import sys
import numpy as np

p = os.getcwd()
sys.path.append(p)

from sm_utils import *

include: 'download.smk'
include: 'samtools.smk'
include: 'spike_refs.smk'
include: 'refs.smk'
include: 'talon.smk'
include: 'lapa.smk'
include: 'cerberus.smk'
include: 'gtex.smk'
include: 'encode_tss.smk'
include: 'ccre.smk'
include: 'fantom_cage.smk'


############# config stuff
configfile: 'config.yml'

datasets_per_talon_run = config['params']['talon']['datasets_per_run']
species=['human', 'mouse']
end_modes = ['tss', 'tes']

# lr stuff
lr_df = process_lr_metadata(config['lr']['meta'],
                            species,
                            datasets_per_talon_run)

############# snakemake settings stuff
wildcard_constraints:
    dataset='|'.join([re.escape(x) for x in lr_df.dataset.tolist()]),
    species='|'.join([re.escape(x) for x in lr_df.species.unique().tolist()]),
    talon_run='|'.join([re.escape(x) for x in lr_df.talon_run.astype(str).unique().tolist()])

############ rules
rule all:
    input:
        rules.all_tss.input,
        rules.all_ccre.input,
        rules.all_fantom.input

        # config['gtex']['cerberus']['ics'],
        # expand(config['gtex']['cerberus']['ends'],
        #        end_mode=end_modes),
        # expand(config['lr']['talon']['bam_ind'],
        #        zip,
        #        species=lr_df.species.tolist(),
        #        dataset=lr_df.dataset.tolist()),
        # expand(config['lr']['lapa']['filt']['gtf'],
        #        zip,
        #        species=lr_df.species.tolist()),



        # expand(config['lr']['talon']['db'],
        #        zip,
        #        species=lr_df.species.tolist(),
        #        talon_run=lr_df.max_talon_run.tolist())
        # expand(config['lr']['talon']['config'],
        #        zip,
        #        species=lr_df.species.tolist(),
        #        talon_run=lr_df.talon_run.tolist())
        # expand(config['lr']['bam_ind'],
        #        species=species,
        #        dataset=['hl60_1_1',
        #                 'brodmann_area_46_1_1'])



################################################################################
############################### LR Download ####################################
################################################################################
use rule dl_encid as dl_lr with:
    params:
        encid = lambda wc:get_lr_encid(wc, lr_df),
        file_ext = 'bam'
    output:
        out = temporary(config['lr']['bam'])
